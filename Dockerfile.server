# Use the official image with .NET SDK (with IIS Express support)
FROM mcr.microsoft.com/dotnet/sdk:latest AS build

WORKDIR /app

# Copy the csproj files and restore dependencies
COPY ["./People.Presentation/People.Presentation.Server/People.Presentation.Server.csproj", "./People.Presentation/People.Presentation.Server/"]
COPY ["./People.Domain/People.Domain.csproj", "./People.Domain/"]
COPY ["./People.Application/People.Application.csproj", "./People.Application/"]
COPY ["./People.Infrastructure/People.Infrastructure.csproj", "./People.Infrastructure/"]

RUN dotnet restore "People.Presentation/People.Presentation.Server/People.Presentation.Server.csproj"

# Copy the rest of the code
COPY . .

# Remove client assets we don't need
RUN rm -Rf /app/People.Presentation/people.presentation.client

# Build the solution
WORKDIR /app/People.Presentation/People.Presentation.Server
RUN dotnet build "People.Presentation.Server.csproj" -c Release

# Publish the app (using the output directory)
RUN dotnet publish "People.Presentation.Server.csproj" -c Release -o /app/publish

# Use the base image with IIS Express
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
WORKDIR /inetpub/wwwroot

# Install IIS Express on the container
RUN apt-get update && \
    apt-get install -y \
    libunwind8 \
    && rm -rf /var/lib/apt/lists/*

# Copy the published app from the build image to the IIS directory
COPY --from=build /app/publish .

# Expose the port that IIS Express will listen on
EXPOSE 80

# A useful debugging 
RUN ls -al

# Start IIS Express to host the application
ENTRYPOINT ["dotnet", "People.Presentation.Server.dll"]
